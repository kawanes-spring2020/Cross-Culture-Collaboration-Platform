package com.javasampleapproach.springrest.postgresql.repo;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Map.Entry;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.javasampleapproach.springrest.postgresql.model.*;

@Service
public class HubspotApiServiceRepoImpl implements HubspotApiServiceRepo {

	@Override
	public List<PartnerModel> getListOfPartners() {
		List<PartnerModel> partnerList = new ArrayList<PartnerModel>();
		try {
			
			String partnerJsonData = getUrl();
			System.out.println(partnerJsonData);
			
			JSONParser parser = new JSONParser();	    	
			Object obj = parser.parse(partnerJsonData);	 

			JSONObject json = (JSONObject) obj;

			JSONArray result = (JSONArray) json.get("partners");
			System.out.println("Result : " + json.get("partners"));

			Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();

			for (int i = 0; i < result.size(); i++) {

				JSONObject jsonPartner = (JSONObject) result.get(i);

				PartnerModel partner = gson.fromJson(jsonPartner.toJSONString(), PartnerModel.class);

				partnerList.add(partner);

			}
			
			return partnerList;

			
		}
		catch(Exception e) {
			
		}
		return null;
	}
	
	public List<Invitation> getInvites(List<PartnerModel> partners) {
		
		List<Invitation> invites = new ArrayList<Invitation>();
		
		Map<String, Map<Date, List<PartnerModel>>> invitationMap = getInvitationList(partners);
		
		for(Entry<String, Map<Date, List<PartnerModel>>> invitationEntry : invitationMap.entrySet()) {
			
			Map<Date, List<PartnerModel>> dateMap = invitationEntry.getValue();
			
			int max = -1;
			Date date  = null;
			List<PartnerModel> availablePartnerList = null;

			for (Map.Entry<Date, List<PartnerModel>> entry : dateMap.entrySet()) {

				List<PartnerModel> partnerList = entry.getValue();

				if(partnerList.size() > max) {
					max = partnerList.size();
					date = entry.getKey();
					availablePartnerList = partnerList;
				}
				else {
					date = null;
					availablePartnerList = null;
				}
			}	
			
			Invitation i = new Invitation();
			
			i.setAttendeeCount(availablePartnerList.size());

			List<String> emailList  = new ArrayList<String>();
			for(PartnerModel partner : availablePartnerList)
				emailList.add(partner.getEmail());
			i.setAttendees(emailList);

			i.setName(invitationEntry.getKey());
			i.setStartDate(date);
			invites.add(i);
		}
		
		return invites;
	}

	public Map<String, Map<Date, List<PartnerModel>>> getInvitationList(List<PartnerModel> partnerList) {

	Map<String, List<PartnerModel>> countryMap = createCountryPartnerMap(partnerList);
	
	Map<String, Map<Date, List<PartnerModel>>> invitatonMap = new HashMap<String, Map<Date, List<PartnerModel>>>();

	for(Map.Entry<String, List<PartnerModel>> countryEntry : countryMap.entrySet()) {

		List<PartnerModel> partners = countryEntry.getValue();

		Set<Date> setDate = new TreeSet<Date>();
		
		for(PartnerModel p : partners) {
			setDate.addAll(feasibleDatesForPartner(p));			
		}	
		System.out.println("For country:"+ countryEntry.getKey()+ "setDate is: "+setDate);
		
		//countryDate.put(countryEntry.getKey(), setDate);
		Map<Date, List<PartnerModel>> partnerMap = new TreeMap<Date, List<PartnerModel>>();
		
		for(PartnerModel p : partners) {
			List<Date> partnerDate = feasibleDatesForPartner(p);
			
			for(Date d : partnerDate) {
				if(setDate.contains(d)) {
					List<PartnerModel> par = new ArrayList<PartnerModel>();
					if(partnerMap.containsKey(d)) {
						par = partnerMap.get(d);							
					}					
					par.add(p);
					partnerMap.put(d, par);
				}
			}
		}
		System.out.println("For country:"+ countryEntry.getKey()+ "Partner Map is: "+partnerMap);
		
		invitatonMap.put(countryEntry.getKey(), partnerMap);
		
	}
	
	return invitatonMap;
}
	
	public Map<String, List<PartnerModel>> createCountryPartnerMap(List<PartnerModel> partners) 
	{
		//Map<Date, Integer> startDates = new HashMap<Date, Integer>();

		Map<String, List<PartnerModel>> countryDates = new HashMap<String, List<PartnerModel>>();

		for(PartnerModel p : partners) {

			List<PartnerModel> partnerList = new ArrayList<PartnerModel>();

			if(countryDates.containsKey(p.getCountry())) {
				partnerList = countryDates.get(p.getCountry());				
				partnerList.add(p);
			}
			else {
				partnerList.add(p);
				countryDates.put(p.getCountry(), partnerList);
			}
		}

		return countryDates;
	}
	
	public List<Date> feasibleDatesForPartner(PartnerModel partner)
	{

		Collections.sort(partner.getAvailableDates());
//		System.out.println("For Country: "+partner.getCountry()+" name: "+partner.getFirstName());

		Map<Date, Integer> startDates = new TreeMap<Date, Integer>();

		List<Date> sortedDates = partner.getAvailableDates();

		startDates.put(sortedDates.get(0), 0);
//		System.out.println("Available dates are: "+sortedDates);
		for (int i = 1; i < sortedDates.size() ; i++)
		{			
			Date prevDate = sortedDates.get(i-1);
			Date curDate = sortedDates.get(i);

			long diff = Math.abs(curDate.getTime() - prevDate.getTime());
			long diffDays = diff / (24 * 60 * 60 * 1000);

			if(diffDays == 1) {					
				int count  = startDates.get(prevDate);
				startDates.put(prevDate, count+1);
				startDates.put(curDate, 1);
			}
			startDates.put(curDate, 0);
		}

		List<Date> feasibleDates = new ArrayList<Date>();

		for(Map.Entry<Date, Integer> dateEntry : startDates.entrySet()) {			
			if(dateEntry.getValue()  > 0) {
				feasibleDates.add(dateEntry.getKey());
			}
		}

		return feasibleDates;
	}

	
	
	public String getUrl() throws IOException {
		URL urlForGetRequest = new URL(APIURL_get);
	    String readLine = null;
	    StringBuffer response = null;
	    HttpURLConnection conection = (HttpURLConnection) urlForGetRequest.openConnection();
	    conection.setRequestMethod("GET");
	    int responseCode = conection.getResponseCode();
	    if (responseCode == HttpURLConnection.HTTP_OK) {
	        BufferedReader in = new BufferedReader(
	            new InputStreamReader(conection.getInputStream()));
	        response = new StringBuffer();
	        while ((readLine = in .readLine()) != null) {
	            response.append(readLine);
	        } in .close();
	        // print result
	        System.out.println("JSON String Result " + response.toString());
	        //GetAndPost.POSTRequest(response.toString());
	    } else {
	        System.out.println("GET NOT WORKED");
	    }
		return response.toString();
	}

	@Override
	public String rrsHttpPost(String invitationList) {

		HttpPost post;
		HttpClient client;
		StringEntity entity;

		try {

			// create HttpPost and HttpClient object
			post = new HttpPost(APIURL_post);
			client = HttpClientBuilder.create().build();

			// setup output message by copying JSON body into 
			// apache StringEntity object along with content type
			entity = new StringEntity(invitationList, HTTP.UTF_8);
			entity.setContentEncoding(HTTP.UTF_8);
			entity.setContentType("text/json");

			// add HTTP headers
			post.setHeader("Accept", "application/json");
			post.setHeader("Accept-Charset", "UTF-8");

			// set Authorization header based on the API key
			//post.setHeader("Authorization", ("Bearer "+"bede60f886f7068a632c7911919d"));
			post.setHeader("Authorization", ("userKey=b6cd9406aebfb0ea9dcf05e4a6b0"));
			post.setEntity(entity);

			// Call REST API and retrieve response content
			HttpResponse authResponse = client.execute(post);
			System.out.println("Response: " + authResponse.getEntity() + " " + authResponse.getStatusLine() + " " + authResponse.getParams()); 
			System.out.println();

			return EntityUtils.toString(authResponse.getEntity());

		}
		catch (Exception e) {   
			System.out.println("Error occurred while calling the service!!");
			return e.toString();
		}
	}

	@Override
	public String stringToJSON(List<Invitation> inviteesList) {
		ObjectMapper objectMapper = new ObjectMapper();    	
		objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
		String arrayToJson = null;
		try {
			arrayToJson = objectMapper.writeValueAsString(inviteesList);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		
		System.out.println(arrayToJson);
		
		StringBuilder s = new StringBuilder();
		s.append("{ " + "\"" + "countries" + "\"" + ": " + arrayToJson + "}");
		
		return s.toString();
	}

	
	
}
